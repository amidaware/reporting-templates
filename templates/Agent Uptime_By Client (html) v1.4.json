{
  "base_template": {
    "name": "Bootstrap Base",
    "html": "<!doctype html>\n<html lang=\"en\">\n    <head>\n        <style>\n            {{css}}\n        </style>\n        <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\n    </head>\n    <body>\n        {% block content %}{% endblock %}\n    </body>\n</html>"
  },
  "template": {
    "name": "Agent Uptime_By Client (html) v1.4",
    "template_css": "",
    "template_md": "{% block content %}\r\n<style>\r\n  @media print {\r\n    .timeline-bar {\r\n      page-break-inside: avoid;\r\n    }\r\n  }\r\n  .small-logo {\r\n    height: 80px;\r\n    width: auto;\r\n  }\r\n  .header-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding-bottom: 10px;\r\n    border-bottom: 2px solid black;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .report-title {\r\n    text-align: right;\r\n  }\r\n\r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    font-size: 11px;\r\n    margin: 20px 0;\r\n  }\r\n\r\n  th {\r\n    background-color: #004085;\r\n    color: #D4D4D4;\r\n    border: 1px solid black;\r\n    padding: 5px;\r\n    text-align: left;\r\n  }\r\n\r\n  td {\r\n    border: 1px solid black;\r\n    padding: 5px;\r\n    text-align: left;\r\n  }\r\n\r\n  h2,\r\n  h3 {\r\n    margin-top: 10px;\r\n    margin-bottom: 5px;\r\n  }\r\n\r\n  .timeline-container {\r\n    margin-top: 40px;\r\n  }\r\n\r\n  .timeline-row {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .timeline-bar {\r\n    position: relative;\r\n    height: 16px;\r\n    background-color: #ddd;\r\n    width: 100%;\r\n  }\r\n\r\n  .timeline-block {\r\n    position: absolute;\r\n    height: 100%;\r\n    background-color: red;\r\n    border: 1px solid #000;\r\n  }\r\n\r\n  .timeline-label {\r\n    font-size: 11px;\r\n    margin-bottom: 4px;\r\n  }\r\n</style>\r\n\r\n<div class=\"header-container\">\r\n  <img src=\"https://github.com/amidaware/reporting-templates/blob/master/assets/gbtnavy%20(256).png?raw=true\" alt=\"Logo\" class=\"logo small-logo\">\r\n  <div class=\"report-title\">\r\n    <h2>{{client.name}} - Agent Downtime Report</h2>\r\n    <h2>Report Date: {{ report_run_timestamp.strftime('%Y-%m-%d') }}</h2>\r\n  </div>\r\n</div>\r\n\r\n{% set cutoff = timedelta_30_days %}\r\n{% set alert_events = [] %}\r\n\r\n<div class=\"timeline-container\" id=\"timelineChart\">\r\n  <h3>Agent Downtime Timeline (Red = Offline)</h3>\r\n</div>\r\n\r\n<script>\r\n/*!\r\n * html2canvas 1.4.1 | https://html2canvas.hertzen.com | (C) 2023 Niklas von Hertzen\r\n * Included here as inline JS to support Tactical RMM PDF rendering\r\n */\r\n!function(t){function e(e){for(var r,n,o=e[0],i=e[1],c=0,a=[];c<o.length;c++)n=o[c],Object.prototype.hasOwnProperty.call(f,n)&&f[n]&&a.push(f[n][0]),f[n]=0;for(r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r]);for(u&&u(e);a.length;)a.shift()()}var r={},f={1:0};function n(e){return Object.prototype.hasOwnProperty.call(f,e)?f[e]:0}var o=function(e,r){var f,n,o,i,r=r||[];for(o in e)Object.prototype.hasOwnProperty.call(e,o)&&(n=e[o],Array.isArray(n)?(f=[],n.forEach(function(e){f.push(o+\"=\"+encodeURIComponent(e))}),r.push(f.join(\"&\"))):r.push(o+\"=\"+encodeURIComponent(n)));return r.join(\"&\")};var u=function(){return null};t.html2canvas=function(){return import(\"https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js\")};\r\n</script>\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Agent ID</th>\r\n      <th>Message</th>\r\n      <th>Time Off</th>\r\n      <th>Time On</th>\r\n      <th>Downtime (minutes)</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {% for item in data_sources.allFieldsAlerts %}\r\n    {% if item.alert_type == \"availability\"\r\n    and item.resolved\r\n    and item.alert_time is defined\r\n    and item.resolved_on is defined\r\n    and item.agent__hostname is defined\r\n    and item.alert_time >= cutoff %}\r\n    {% set downtime = (item.resolved_on - item.alert_time).total_seconds() / 60 %}\r\n    <tr>\r\n      <td>{{ item.agent__hostname }}</td>\r\n      <td>{{ item.message }}</td>\r\n      <td>{{ item.alert_time.strftime('%Y-%m-%d %H:%M') }}</td>\r\n      <td>{{ item.resolved_on.strftime('%Y-%m-%d %H:%M') }}</td>\r\n{% set dt_mins = downtime | round(0, 'floor') %}\r\n{% set dt_days = (dt_mins // 1440) %}\r\n{% set dt_hrs = ((dt_mins % 1440) // 60) %}\r\n{% set dt_min = (dt_mins % 60) %}\r\n<td style=\"padding: 5px;\">\r\n  {% if dt_days > 0 %}{{ dt_days }}d {% endif %}\r\n  {% if dt_hrs > 0 %}{{ dt_hrs }}h {% endif %}\r\n  {% if dt_min > 0 or (dt_days == 0 and dt_hrs == 0) %}{{ dt_min }}m{% endif %}\r\n</td>\r\n\r\n\r\n    </tr>\r\n    {% set _ = alert_events.append({\r\n    \"agent\": item.agent__hostname,\r\n    \"start\": item.alert_time.isoformat(),\r\n    \"end\": item.resolved_on.isoformat()\r\n    }) %}\r\n    {% endif %}\r\n    {% endfor %}\r\n  </tbody>\r\n</table>\r\n\r\n\r\n\r\n<script>\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n  const events = {{ alert_events | tojson | safe }};\r\n  const container = document.getElementById(\"timelineChart\");\r\n  container.style.margin = \"0 20px\";\r\n\r\n  if (!events.length) {\r\n    const p = document.createElement(\"p\");\r\n    p.textContent = \"No downtime data found.\";\r\n    container.appendChild(p);\r\n    return;\r\n  }\r\n\r\n  const minTime = Math.min(...events.map(e => new Date(e.start).getTime()));\r\n  const maxTime = Math.max(...events.map(e => new Date(e.end).getTime()));\r\n  const range = maxTime - minTime;\r\n\r\n  const grouped = {};\r\n  events.forEach(e => {\r\n    if (!grouped[e.agent]) grouped[e.agent] = { events: [], totalDowntime: 0 };\r\n    const start = new Date(e.start);\r\n    const end = new Date(e.end);\r\n    const minutes = (end - start) / 60000;\r\n    grouped[e.agent].events.push({ start, end });\r\n    grouped[e.agent].totalDowntime += minutes;\r\n  });\r\n\r\n  Object.entries(grouped).forEach(([agent, data]) => {\r\n    const totalMins = Math.round(data.totalDowntime);\r\n    const days = Math.floor(totalMins / 1440);\r\n    const hrs = Math.floor((totalMins % 1440) / 60);\r\n    const min = totalMins % 60;\r\n    const summary = `(Offline ${days} day${days !== 1 ? 's' : ''} ${hrs} hr${hrs !== 1 ? 's' : ''} ${min} min in last 30 days)`;\r\n\r\n    const row = document.createElement(\"div\");\r\n    row.className = \"timeline-row\";\r\n    row.style.marginBottom = \"30px\";\r\n\r\n    const label = document.createElement(\"div\");\r\n    label.className = \"timeline-label\";\r\n    label.innerHTML = `<strong>${agent}</strong> ${summary}`;\r\n    row.appendChild(label);\r\n\r\n    const barWrapper = document.createElement(\"div\");\r\n    barWrapper.style.position = \"relative\";\r\n\r\n    const bar = document.createElement(\"div\");\r\n    bar.className = \"timeline-bar\";\r\n    bar.style.marginBottom = \"4px\";\r\n\r\n    data.events.forEach(({ start, end }) => {\r\n      const offset = ((start.getTime() - minTime) / range) * 100;\r\n      const width = ((end.getTime() - start.getTime()) / range) * 100;\r\n\r\n      const block = document.createElement(\"div\");\r\n      block.className = \"timeline-block\";\r\n      block.style.left = offset + \"%\";\r\n      block.style.width = width + \"%\";\r\n      block.title = `${start.toLocaleString()} â€“ ${end.toLocaleString()}`;\r\n      bar.appendChild(block);\r\n    });\r\n\r\n    const tickRow = document.createElement(\"div\");\r\n    tickRow.style.borderTop = \"1px solid #ccc\";\r\n    tickRow.style.position = \"relative\";\r\n    tickRow.style.height = \"16px\";\r\n\r\n    const totalDays = Math.ceil(range / (1000 * 60 * 60 * 24));\r\n    for (let i = 0; i <= totalDays; i++) {\r\n      const tick = document.createElement(\"div\");\r\n      tick.style.position = \"absolute\";\r\n      tick.style.left = ((i / totalDays) * 100) + \"%\";\r\n      tick.style.height = \"100%\";\r\n      tick.style.borderLeft = \"1px dashed #888\";\r\n      tick.style.fontSize = \"9px\";\r\n      tick.style.color = \"#333\";\r\n      tick.style.paddingLeft = \"2px\";\r\n      tick.style.whiteSpace = \"nowrap\";\r\n\r\n      const dayDate = new Date(minTime + i * 24 * 60 * 60 * 1000);\r\n      tick.textContent = dayDate.toLocaleDateString(undefined, { weekday: 'short', day: 'numeric' });\r\n\r\n      tickRow.appendChild(tick);\r\n    }\r\n\r\n    barWrapper.appendChild(bar);\r\n    barWrapper.appendChild(tickRow);\r\n    row.appendChild(barWrapper);\r\n    container.appendChild(row);\r\n  });\r\n\r\n  // Delay snapshotting to ensure DOM is fully rendered\r\n  setTimeout(() => {\r\n    window.html2canvas = window.html2canvas || window[\"html2canvas\"]; // fallback ref\r\n    if (typeof html2canvas === \"function\") {\r\n      html2canvas(container).then(canvas => {\r\n        const img = document.createElement(\"img\");\r\n        img.src = canvas.toDataURL(\"image/png\");\r\n        img.style.maxWidth = \"100%\";\r\n        img.alt = \"Agent Downtime Timeline Snapshot\";\r\n        container.innerHTML = \"\"; // Clear original\r\n        container.appendChild(img);\r\n      }).catch(err => {\r\n        console.error(\"html2canvas failed:\", err);\r\n      });\r\n    } else {\r\n      console.warn(\"html2canvas not loaded.\");\r\n    }\r\n  }, 300);\r\n});\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n{% endblock %}",
    "type": "html",
    "depends_on": [
      "client"
    ],
    "template_variables": "report_run_timestamp: !now\ntimedelta_30_days: !now days=-30\ndata_sources:\n  allFieldsAlerts:\n    model: alert\n    only:\n      - agent__hostname\n      - message\n      - alert_time\n      - resolved_on\n      - alert_type\n      - agent_id\n      - resolved\n    filter:\n      agent__site__client_id: '{{client.id}}'"
  },
  "assets": []
}